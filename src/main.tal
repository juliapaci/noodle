( Noodle )

~src/utils.tal

%SWP? { #01 JCN SWP }
%SWP2? { #01 JCN SWP2 }
%BRK? { #01 JCN BRK }
%RTN? { #01 JCN RTN }
%SFL  { #40 SFT SFT }
%ABS2 { DUP2 #0f SFT2 = #05 JCN #0000 SWP2 -- }
%LTS2 { #8000 ++ SWP2 #8000 ++ >> }
%GTS2 { #8000 ++ SWP2 #8000 ++ << }

%PAD { #0003 }

%GET-ITER { OVR2 NIP OVR SWP }
%ADD-POSITIONS { ROT2 ++ ROT2 ROT2 ++ SWP2 }

%SET-STATE { #01 .state/changed STZ ;draw-filepane/state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-filepane/state JSR2 }

%GET-FRAME-SIZE { .canvas/h LDZ2 .canvas/w LDZ2 MUL2 8** } ( -- length* )
%GET-ANIM-SIZE { GET-FRAME-SIZE .anim/limit LDZ INC TOS MUL2 } ( -- length* )
%GET-FRAME-ADDR { TOS GET-FRAME-SIZE ** ;data ++ } ( frame -- addr* )

%SIZE-TO-RECT {
	STH2 STH2 OVR2 STH2r ++ OVR2 STH2r ++
} ( x y w h -- x1 y1 x2 y2 )

( devices )

|00 @System     &vector $2 &pad     $6 &r      $2 &g     $2 &b     $2
|10 @Console    &vector $2 &read    $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width   $2 &height $2 &auto  $1 &pad   $1 &x     $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button  $1 &key    $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state  $1 &pad    $3 &scrollx $2 &scrolly $2
|a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name    $2 &length  $2 &read   $2 &write $2

( variables )

|0000

@state
	&timer $1 &blink $1 &presentation $1 &changed $1
@filepath $40
@brush
	&tool $1 &size $1 &patt $1 &oper $2 &mode $1
@cursor
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
	&last $1
@zoom
	&active $1
	&x $2 &y $2
@anim
	&frame $1 &limit $1 &onion $1 &addr $2
@theme
	&r $1 &g $1 &b $1
@center
	&x $2 &y $2
@canvas
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
	&w $1 &w-short $1 &h $1 &h-short $1
@guide
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@panel
	&x $2 &y $2 &x2 $2 &y2 $2
@animpane
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@filepane
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@namepane
	&x1 $2 &y1 $2 &x2 $2 &y2 $2
@line
	&x1 $2 &y1 $2 &x2 $2 &y2 $2 &sx $2 &sy $2 &dx $2 &dy $2 &e1 $2 &e2 $2
@line-guide
	&x1 $2 &y1 $2 &x2 $2 &y2 $2 &sx $2 &sy $2 &dx $2 &dy $2 &e1 $2 &e2 $2 &color $1

( program )

|0100

	( vectors )
	;on-console .Console/vector DEO2
	;untrap JSR2

	( colors )
	#70fe .System/r DEO2
	#c0f3 .System/g DEO2
	#90f3 .System/b DEO2

	( default brush )
	#04 .brush/size STZ
	#00 .brush/patt STZ
	#00 .brush/tool STZ

	.Screen/width DEI2 2// .center/x STZ2
	.Screen/height DEI2 2// .center/y STZ2

	( below panes )
	#0010 .Screen/height DEI2 #0010 -- #0020 #0008 SIZE-TO-RECT
		.animpane/y2 STZ2 .animpane/x2 STZ2 .animpane/y1 STZ2 .animpane/x1 STZ2
	.Screen/width DEI2 #0031 -- .Screen/height DEI2 #0010 -- #0020 #0008 SIZE-TO-RECT
		.filepane/y2 STZ2 .filepane/x2 STZ2 .filepane/y1 STZ2 .filepane/x1 STZ2
	#0038 .Screen/height DEI2 #0010 -- .Screen/width DEI2 #0070 -- #0008 SIZE-TO-RECT
		.namepane/y2 STZ2 .namepane/x2 STZ2 .namepane/y1 STZ2 .namepane/x1 STZ2

	( panel )
	#0008 DUP2 .panel/x STZ2 #0018 ++ .panel/x2 STZ2
	#0008 DUP2 .panel/y STZ2 #0088 ++ .panel/y2 STZ2

	( starting frame )
	.anim/frame LDZ GET-FRAME-ADDR .anim/addr STZ2
		#01 .anim/onion STZ

	( default size )
	.Screen/width DEI2 8// #0004 --
	.Screen/height DEI2 8// #0006 --
		;set-size JSR2

	( ready. )
	;draw-filepane/state JSR2

	( load default file )
	;new-file JSR2

	( theme support )
	;load-theme JSR2
	;redraw JSR2

BRK

@untrap ( -- )

	( vectors )
	;on-frame .Screen/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2

	( filepath )
	#00 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors )
	;on-frame-trap .Screen/vector DEO2
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2

	( filepath )
	#01 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

	( clear brush )
	.cursor/x2 LDZ2 .Screen/x DEO2
	.cursor/y2 LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

RTN

@on-console ( -> )

	#00 ;draw-filepath JSR2
	( start )
	[ LIT &listening $1 ] ,&no-start JCN
		#01 ,&listening STR
		;filepath #0040 ;mclr JSR2
		&no-start
	( end )
	.Console/read DEI
	DUP IS-VALID ,&no-end JCN
		#00 ,&listening STR
		&no-end
	( capture )
	,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@on-button-trap ( -> )

	#00 ;draw-filepath JSR2
	.Controller/key DEI STANDARD-LB ,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@capture-trap ( button -- )

	DUP ,&no-null JCN POP RTN &no-null
	[ #08 ] !~ ,&no-pop JCN ;filepath ;spop JSR2 POP RTN &no-pop
	[ #0a ] !~ ,&no-load JCN ;load-file JSR2 &no-load
	[ #7f ] !~ ,&no-delete JCN ;filepath #0040 ;mclr JSR2 POP RTN &no-delete
	[ #20 ] >~ ,&no-special JCN ;untrap JSR2 POP RTN &no-special
	;filepath ;slen JSR2 NIP #3f = ,&no-push JCN
		DUP ;filepath ROT ;sput JSR2
		&no-push
	POP

RTN

@on-frame-trap ( -> )

	.state/timer LDZ
	DUP 8MOD ,&no-blink JCN
		DUP 8/ 2MOD 8* INC ;draw-filepath JSR2
		&no-blink
	INC .state/timer STZ

BRK

@on-frame ( -> )

	( inactive )

BRK

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI BRK?

	;untrap JSR2

BRK

@on-mouse ( -> )

	;draw-cursor JSR2

	.Mouse/x DEI2 .Mouse/y DEI2

	( begin with canvas )
	OVR2 OVR2 .canvas ;within-rect JSR2
		;on-touch-canvas JCN2

	( record mouse release outside of canvas )
	.Mouse/state DEI #00 ! ,&skip JCN
		#00 .cursor/last STZ
		&skip

	( only when click originates in pane )
	.Mouse/state DEI .cursor/last LDZ #0100 !! ,&end JCN

	( anim enabled in presentation )
	OVR2 OVR2 .animpane ;within-rect JSR2
		;on-touch-animpane JCN2

	( disable with presentation )
	.state/presentation LDZ ,&end-present JCN

	OVR2 OVR2 .panel ;within-rect JSR2 ;on-touch-panel JCN2
	OVR2 OVR2 .filepane ;within-rect JSR2 ;on-touch-filepane JCN2
	OVR2 OVR2 .namepane ;within-rect JSR2 ;on-touch-namepane JCN2

	&end-present

	( toggle present mode )
	;present JSR2

	&end
	POP2 POP2

BRK

@on-touch-panel ( x* y* -> )

	.panel/y LDZ2 -- #0004 -- #000a // NIP
	ROT ROT
	.panel/x LDZ2 -- #000a // NIP
	SWP
	( within x )
	OVR #02 < ,&valid JCN POP2 BRK &valid
	( within y )
	DUP #03 < ,&tool JCN
	DUP #03 > OVR #08 < AND ,&patt JCN
	DUP #07 > OVR #0c < AND ,&size JCN
	BRK
	&tool 2* + ;select-tool JSR2 RELEASE-MOUSE BRK
	&patt #04 - 2* + ;select-patt JSR2 RELEASE-MOUSE BRK
	&size #08 - 2* + ;select-size JSR2 RELEASE-MOUSE BRK

BRK

@on-touch-canvas ( x* y* -> )

	( set erase from right-click/mode )
	[ ;remove-pixel ;add-pixel ] .Mouse/state DEI #01 > .brush/mode LDZ + SWP2? POP2 .brush/oper STZ2
	( get mouse state )
	.Mouse/state DEI #00 > #10 SFT .cursor/last LDZ #00 > + #00 SWP 2**
	( non hover states )
	DUP2 #0000 >> ,&continue JCN
		POP2 POP2 POP2 BRK
		&continue
	( get tool offset )
	.brush/tool LDZ #00 SWP 8**
	( record state )
	.Mouse/state DEI .cursor/last STZ
	( find fns )
	;tools ++ ++ LDA2 STH2
	( canvas offset )
	.canvas/y1 LDZ2 -- SWP2
	.canvas/x1 LDZ2 -- SWP2
	( zoom offset )
	.zoom/active LDZ #01 ! ,&no-zoom JCN
		8// .zoom/y LDZ2 ++ SWP2
		8// .zoom/x LDZ2 ++ SWP2
		&no-zoom
	STH2r JMP2

BRK

@on-touch-animpane ( x* y* -- )

	( unused y ) POP2

	.animpane/x1 LDZ2 -- 8// NIP

	[ #00 ] !~ ,&no-onion JCN
		.anim/onion TOGGLE
		;redraw JSR2
		RELEASE-MOUSE POP BRK
		&no-onion
	[ #02 ] !~ ,&no-next JCN
		;next-frame JSR2
		;redraw JSR2
		RELEASE-MOUSE POP BRK
		&no-next
	[ #03 ] !~ ,&no-frame JCN
		.Mouse/state DEI #00 ! ;mod-limit JSR2
		RELEASE-MOUSE POP BRK
		&no-frame
	POP

BRK

@on-touch-filepane ( x* y* -- )

	( unused y ) POP2

	.filepane/x1 LDZ2 -- 8// NIP

	[ #00 ] !~ ,&no-blank JCN
		;new-file JSR2
		RELEASE-MOUSE POP BRK
		&no-blank
	[ #01 ] !~ ,&no-load JCN
		;load-file JSR2
		RELEASE-MOUSE POP BRK
		&no-load
	[ #03 ] !~ ,&no-save JCN
		;save-file JSR2
		RELEASE-MOUSE POP BRK
		&no-save
	POP

BRK

@on-touch-namepane ( x* y* -- )

	( unused x y ) POP2 POP2

	#00 ;draw-filepath JSR2
	;trap JSR2

BRK

@on-button ( -> )

	.Controller/button DEI
		DUP #01 AND ;on-button-ctrl JCN2
		DUP #02 AND ;on-button-alt JCN2
		DUP #f0 AND ;on-button-arrow JCN2
		DUP #04 ! ,&no-shift JCN
			.zoom/active TOGGLE
			;redraw JSR2
			&no-shift
		DUP #08 ! ,&no-esc JCN
			.brush/mode TOGGLE
			;draw-sizepane JSR2
			&no-esc
	POP

	.Controller/key DEI
	#00 !~ ,&continue JCN POP BRK &continue
	#0d !~ ,&no-enter JCN POP ;next-frame JSR2 ;redraw JSR2 BRK &no-enter
	#09 !~ ,&no-invert JCN POP ;invert JSR2 BRK &no-invert
	#20 !~ ,&no-space JCN .zoom/active TOGGLE ;redraw JSR2 &no-space
	LIT 'q !~ ,&no-qkey JCN #00 ;select-tool JSR2 &no-qkey
	LIT 'w !~ ,&no-wkey JCN #01 ;select-tool JSR2 &no-wkey
	LIT 'e !~ ,&no-ekey JCN #02 ;select-tool JSR2 &no-ekey
	LIT 'r !~ ,&no-rkey JCN #03 ;select-tool JSR2 &no-rkey
	LIT 't !~ ,&no-tkey JCN #04 ;select-tool JSR2 &no-tkey
	LIT 'y !~ ,&no-ykey JCN #05 ;select-tool JSR2 &no-ykey
	LIT '[ !~ ,&no-lbracket JCN .brush/size LDZ #01 - ;select-size JSR2 &no-lbracket
	LIT '] !~ ,&no-rbracket JCN .brush/size LDZ INC ;select-size JSR2 &no-rbracket
	DUP
		DUP #30 > SWP #39 < #0101 !! ,&no-numkey JCN
		( size ) DUP #31 SUB ;select-patt JSR2 &no-numkey
	POP

BRK

@on-button-ctrl ( button -> )

	POP
	.Controller/key DEI
	( new/rename/open/save )
	[ LIT 'n ] !~ ,&no-new JCN ;new-file JSR2 POP BRK &no-new
	[ LIT 'r ] !~ ,&no-name JCN ;trap JSR2 POP BRK &no-name
	[ LIT 'o ] !~ ,&no-open JCN ;load-file JSR2 POP BRK &no-open
	[ LIT 's ] !~ ,&no-save JCN ;save-file JSR2 POP BRK  &no-save
	( copy glyph )
	[ LIT 'p ] !~ ,&no-copy JCN ;glyph-snarf JSR2 POP BRK  &no-copy
	POP

BRK

@on-button-alt ( button -> )

	#04 SFT
	[ #01 ] !~ ,&no-u JCN .canvas/w LDZ2 .canvas/h LDZ2 DEC2 ;set-size JSR2 &no-u
	[ #02 ] !~ ,&no-d JCN .canvas/w LDZ2 .canvas/h LDZ2 INC2 ;set-size JSR2 &no-d
	[ #04 ] !~ ,&no-l JCN .canvas/w LDZ2 DEC2 .canvas/h LDZ2 ;set-size JSR2 &no-l
	[ #08 ] !~ ,&no-r JCN .canvas/w LDZ2 INC2 .canvas/h LDZ2 ;set-size JSR2 &no-r
	POP

BRK

@on-button-arrow ( button -> )

	.zoom/active LDZ ,&is-zoom JCN POP BRK &is-zoom

	DUP #04 SFT #01 AND #01 ! ,&no-u JCN .zoom/y LDZ2k DEC2 ROT STZ2 &no-u
	DUP #05 SFT #01 AND #01 ! ,&no-d JCN .zoom/y LDZ2k INC2 ROT STZ2 &no-d
	DUP #06 SFT #01 AND #01 ! ,&no-l JCN .zoom/x LDZ2k DEC2 ROT STZ2 &no-l
	DUP #07 SFT #01 AND #01 ! ,&no-r JCN .zoom/x LDZ2k INC2 ROT STZ2 &no-r
	POP
	;draw-canvas JSR2

BRK

@select-tool ( tool -- )

	.brush/tool STZ
	;draw-toolpane JSR2

RTN

@select-patt ( patt -- )

	.brush/patt STZ
	( select brush )
	.brush/tool LDZ ,&no-switch JCN
		#01 ;select-tool JSR2
		&no-switch
	;draw-pattpane JSR2

RTN

@select-size ( size -- )

	8MOD
	( toggle mode on reselection )
	DUP .brush/size LDZ ! ,&no-toggle JCN
		.brush/mode TOGGLE
		&no-toggle
	.brush/size STZ
	( select brush )
	.brush/tool LDZ ,&no-switch JCN
		#01 ;select-tool JSR2
		&no-switch
	;draw-sizepane JSR2

RTN

@prev-frame ( -- )

	.anim/frame LDZ ,&not-zero JCN
		.anim/limit LDZ
		DUP GET-FRAME-ADDR .anim/addr STZ2
		.anim/frame STZ
		RTN
		&not-zero
	.anim/frame LDZ #01 -
		DUP GET-FRAME-ADDR .anim/addr STZ2
		.anim/frame STZ

RTN

@next-frame ( -- )

	.anim/frame LDZ .anim/limit LDZ ! ,&not-limit JCN
		#00
		DUP GET-FRAME-ADDR .anim/addr STZ2
		.anim/frame STZ
		RTN
		&not-limit
	.anim/frame LDZ INC
		DUP GET-FRAME-ADDR .anim/addr STZ2
		.anim/frame STZ

RTN

@invert ( -- )

	.anim/addr LDZ2 STH2k GET-FRAME-SIZE ++ STH2r
	&loop
		( load ) DUP2 DUP2 LDA #ff EOR
		( save ) ROT ROT STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	;redraw JSR2

RTN

@set-size ( w* h* -- )

		DUP2 .canvas/h LDZ2 !! ,&changed JCN
		OVR2 .canvas/w LDZ2 !! ,&changed JCN
		POP2 POP2 RTN
	&changed

	( undraw )
	.canvas #00 ;fill-rect JSR2

	( clamp )
	[ #0002 ] MIN2 [ .Screen/height DEI2 8// #0006 -- ] MAX2
		STH2k .canvas/h STZ2
	[ #0002 ] MIN2 [ .Screen/width DEI2 8// #000a -- ] MAX2
		STH2k .canvas/w STZ2

	.center/x LDZ2 STH2kr 8** 2// -- .canvas/x1 STZ2
	STH2r 8** .canvas/x1 LDZ2 ++ .canvas/x2 STZ2
	.center/y LDZ2 STH2kr 8** 2// -- .canvas/y1 STZ2
	STH2r 8** .canvas/y1 LDZ2 ++ .canvas/y2 STZ2

	( draw ui )
	;draw-background JSR2

	( draw size
	.Screen/width DEI2 #0078 -- .Screen/x DEO2
	#000d .Screen/y DEO2
	AUTO-X
	.canvas/w LDZ2 #80 SFT2 .canvas/h LDZ2 ++ #01 ;draw-short JSR2
	AUTO-NONE
	 )

	( frame )
	.canvas #01 ;line-rect JSR2

	;draw-canvas JSR2

	;draw-panel JSR2

RTN

@present ( -- )

	.state/presentation TOGGLE

	.state/presentation LDZ ,&hide JCN
	,&show JMP

	&show
		( load theme )
		.theme/r LDZ .System/r DEO
		.theme/g LDZ .System/g DEO
		.theme/b LDZ .System/b DEO
		;draw-background JSR2
		;draw-canvas-outside JSR2
		RELEASE-MOUSE
		RTN

	&hide
		( save theme )
		.System/r DEI DUP .theme/r STZ #0f AND .System/r DEO
		.System/g DEI DUP .theme/g STZ #0f AND .System/g DEO
		.System/b DEI DUP .theme/b STZ #0f AND .System/b DEO
		;draw-background JSR2
		;draw-canvas-outside JSR2
		RELEASE-MOUSE
		RTN

RTN

@mod-limit ( mod -- )

	( reset ) #00 .anim/frame STZ
	.anim/limit LDZ + DUP #07 AND .anim/limit STZ
	( get maximum frames that can fit in memory )
	#fff0 ;data -- GET-FRAME-SIZE DIV2 DEC2 NIP
	GTH ,&clamp JCN
	;redraw JSR2
	RTN
	&clamp
		#00 .anim/limit STZ
		;redraw JSR2

RTN

@paint-line ( x1* y1* x2* y2* -- )

	( load ) .line/y1 STZ2 .line/x1 STZ2 .line/y2 STZ2 .line/x2 STZ2

	.line/x1 LDZ2 .line/x2 LDZ2 -- ABS2 .line/dx STZ2
	.line/y1 LDZ2 .line/y2 LDZ2 -- ABS2 #0000 SWP2 -- .line/dy STZ2
	#ffff #00 .line/x2 LDZ2 .line/x1 LDZ2 LTS2 2** ++ .line/sx STZ2
	#ffff #00 .line/y2 LDZ2 .line/y1 LDZ2 LTS2 2** ++ .line/sy STZ2
	.line/dx LDZ2 .line/dy LDZ2 ++ .line/e1 STZ2
	&loop
		( paint ) .line/x2 LDZ2 .line/y2 LDZ2 .brush/oper LDZ2 JSR2
		.line/x2 LDZ2 .line/y2 LDZ2 ;draw-tile JSR2
		.line/x2 LDZ2 .line/x1 LDZ2 == .line/y2 LDZ2 .line/y1 LDZ2 == #0101 == ,&end JCN
		.line/e1 LDZ2 2** .line/e2 STZ2
		.line/e2 LDZ2 .line/dy LDZ2 LTS2 ,&skipy JCN
			.line/e1 LDZ2 .line/dy LDZ2 ++ .line/e1 STZ2
			.line/x2 LDZ2 .line/sx LDZ2 ++ .line/x2 STZ2
			&skipy
		.line/e2 LDZ2 .line/dx LDZ2 GTS2 ,&skipx JCN
			.line/e1 LDZ2 .line/dx LDZ2 ++ .line/e1 STZ2
			.line/y2 LDZ2 .line/sy LDZ2 ++ .line/y2 STZ2
			&skipx
		;&loop JMP2
	&end

RTN

@paint-rect ( -- )

	.cursor/y2 LDZ2 .cursor/y1 LDZ2 ( flip sign ) GTH2k JMP SWP2
	&ver
		STH2k
		.cursor/x2 LDZ2 .cursor/x1 LDZ2 ( flip sign ) GTH2k JMP SWP2
		&hor
			DUP2 STH2kr ;patternize JSR2 #00 = ,&no-pixel JCN
				DUP2 STH2kr .brush/oper LDZ2 JSR2
				&no-pixel
			INC2
			OVR2 OVR2 GTS2 ,&hor JCN
		POP2 POP2 POP2r
		INC2
		OVR2 OVR2 GTS2 ,&ver JCN
	POP2 POP2
	;draw-canvas JSR2

RTN

@paint-brush ( x* y* -- )

	STH2 STH2
	#08 #00
	&ver
		#08 #00
		&hor
			GET-ITER
			DUP2 STH STH ;size-icns #00 .brush/size LDZ 8** ++ #00 STHr ++ LDA #07 STHr SUB SFT #01 AND #00 = ,&skip JCN
			DUP2 [ TOS ROT TOS SWP2 ] STH2kr SWP2r STH2kr SWP2r ADD-POSITIONS OVR2 OVR2 ;patternize JSR2 #00 = ,&no-pixel JCN
					OVR2 OVR2 .brush/oper LDZ2 JSR2
					;draw-tile JSR2
					,&skip JMP
					&no-pixel
					POP2 POP2
				&skip
				POP2
			INC GTHk ,&hor JCN
			POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r POP2r

RTN

@patternize ( x* y* -- )

	STH2 STH2
	.brush/patt LDZ
	DUP ,&noplain JCN
		POP POP2r POP2r
		#01 RTN &noplain
	DUP #01 ! ,&notone1 JCN
		POP OVR2r OVR2r
		STH2r STH2r ++ #0001 AND2 #0000 ==
		STH2r STH2r -- #0001 AND2 #0000 ==
		#0101 == RTN &notone1
	DUP #02 ! ,&notone2 JCN
		POP OVR2r OVR2r
		STH2r STH2r ++ #0003 AND2 #0000 ==
		STH2r STH2r -- #0003 AND2 #0000 ==
		#0101 == RTN &notone2
	DUP #03 ! ,&notone3 JCN
		POP OVR2r OVR2r
		STH2r STH2r ++ #0005 AND2 #0000 ==
		STH2r STH2r -- #0005 AND2 #0000 ==
		#0101 == RTN &notone3
	DUP #04 ! ,&notone4 JCN
		POP STH2r STH2r
		++ #0003 AND2 #0000 == RTN &notone4
	DUP #05 ! ,&notone5 JCN
		POP STH2r STH2r
		-- #0003 AND2 #0000 == RTN &notone5
	DUP #06 ! ,&notone6 JCN
		POP SWP2r POP2r STH2r
		#0001 AND2 NIP RTN &notone6
	DUP #07 ! ,&notone7 JCN
		POP POP2r STH2r
		#0001 AND2 NIP RTN &notone7
	POP POP2r POP2r
	#00

RTN

@paint-magic ( x* y* -- )

	STH2 STH2
	.brush/size LDZ #00
	&ver
		.brush/size LDZ #00
		&hor
			GET-ITER [ TOS ROT TOS ]
			STH2kr SWP2r STH2kr SWP2r ADD-POSITIONS

			( skip blanks )
			OVR2 OVR2 ;get-pixel JSR2 #00 = ,&blank JCN
				OVR2 OVR2 ,clean-pixel JSR
				OVR2 OVR2 ;draw-tile JSR2
				&blank
			POP2 POP2

			INC GTHk ,&hor JCN
			POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r POP2r

RTN

@clean-pixel ( x* y* -- )

	( get neighbors )
	OVR2 OVR2 DEC2 ,get-pixel JSR STH
	OVR2 INC2 OVR2 ,get-pixel JSR #10 SFT STH ADDr
	OVR2 OVR2 INC2 ,get-pixel JSR #20 SFT STH ADDr
	OVR2 DEC2 OVR2 ,get-pixel JSR #30 SFT STH ADDr
	STHr
	DUP #03 = ,&remove JCN
	DUP #06 = ,&remove JCN
	DUP #09 = ,&remove JCN
	DUP #0c = ,&remove JCN
	POP POP2 POP2 RTN
	&remove
		POP ;remove-pixel JSR2 RTN

RTN

@get-pixel ( x* y* -- b )

	,within-canvas JSR ,&continue JCN
		POP2 POP2 #01 RTN
		&continue

	( keep x* ) OVR2 NIP 8MOD STH
	( get byte ) ,get-row JSR LDA
	( flag ) #07 STHr SUB SFT #01 AND

RTN

@add-pixel ( x* y* -- )

	,within-canvas JSR ,&continue JCN
		POP2 POP2 RTN
		&continue

	( keep x* ) OVR2 NIP 8MOD STH
	( get byte ) ,get-row JSR LDAk
	( mask ) #01 #07 STHr SUB SFL ORA
	( save ) ROT ROT STA

RTN

@remove-pixel ( x* y* -- )

	,within-canvas JSR ,&continue JCN
		POP2 POP2 RTN
		&continue

	( keep x* ) OVR2 NIP 8MOD STH
	( get byte ) ,get-row JSR LDAk
	( mask ) #01 #07 STHr SUB SFL #ff EOR AND
	( save ) ROT ROT STA

RTN

@within-canvas ( x* y* -- x* y* flag )

	( clamp ) DUP2 8// .canvas/h LDZ2 << #00 = ,&skip JCN
	( clamp ) OVR2 8// .canvas/w LDZ2 << #00 = ,&skip JCN
	#01 RTN
	&skip
		#00 RTN

RTN

@get-row ( x* y* -- row* )

	STH2k
		8// SWP2
		8// SWP2
		.canvas/w LDZ2 ** ++ 8**
	STH2r
		8MOD2 ++
	.anim/addr LDZ2 ++

RTN

( file )

@new-file ( path* -- )

	#2c ;draw-filepath JSR2
	( rename to untitled.txt )
	;filepath #0020 ;mclr JSR2
	;untitled-txt ;filepath #000c ;mcpy JSR2
	( erase data )
	;data GET-ANIM-SIZE ;mclr JSR2
	RESET-STATE
	( draw )
	;redraw JSR2

RTN

@load-file ( -- )

	( erase data )
	;data GET-ANIM-SIZE ;mclr JSR2
	RESET-STATE
	( load )
	;filepath .File/name DEO2
	GET-ANIM-SIZE .File/length DEO2
	;data .File/read DEO2
	( draw )
	;redraw JSR2

RTN

@save-file ( path* -- )

	;filepath .File/name DEO2
	GET-ANIM-SIZE .File/length DEO2
	;data .File/write DEO2
	( draw )
	;redraw JSR2

RTN

( Drawing )

@redraw ( -- )

	;draw-background JSR2
	,draw-canvas JSR

RTN

@draw-canvas-outside ( -- )

	( frame )
	.canvas #01 ;line-rect JSR2

	,draw-canvas JSR

RTN

@draw-canvas ( -- )

	( full )
	.zoom/active LDZ ,&zoom JCN
			.anim/onion LDZ ,&full-onion JCN
			#09 ,draw-canvas-full JSR
			RTN
			&full-onion
			( onion )
			;prev-frame JSR2
			#0b ,draw-canvas-full JSR
			;next-frame JSR2
			#05 ,draw-canvas-full JSR
		RTN
		&zoom
	( zoom )
		.anim/onion LDZ ,&zoom-onion JCN
		#09 ,draw-canvas-zoom JSR
		RTN
		&zoom-onion
		( onion )
		;prev-frame JSR2
		#0b ,draw-canvas-zoom JSR
		;next-frame JSR2
		#05 ,draw-canvas-zoom JSR
	RTN

RTN

@draw-canvas-full ( color -- )

	AUTO-XADDR

	STH
	.anim/addr LDZ2 .Screen/addr DEO2

	.canvas/y1 LDZ2 .Screen/y DEO2
	.canvas/h-short LDZ #00
	&ver
		.canvas/x1 LDZ2 .Screen/x DEO2
		.canvas/w-short LDZ #00
		&hor
			STHkr .Screen/sprite DEO
			INC GTHk ,&hor JCN
		POP2
		.Screen/y DEI2 #0008 ++ .Screen/y DEO2
		INC GTHk ,&ver JCN
	POP2
	POPr

	AUTO-NONE

RTN

@draw-canvas-zoom ( color -- )

	AUTO-X

	STH

	.canvas/y1 LDZ2 .Screen/y DEO2
	.canvas/h-short LDZ #00
	&ver
		.canvas/x1 LDZ2 .Screen/x DEO2
		.canvas/w-short LDZ #00
		&hor
			( get pixel )
			GET-ITER
				( y ) TOS .zoom/y LDZ2 ++ STH2
				( x ) TOS .zoom/x LDZ2 ++ STH2r
				;get-pixel JSR2 TOS 8**
				;bigpixel-icns ++ .Screen/addr DEO2
			STHkr .Screen/sprite DEO
			INC GTHk ,&hor JCN
		POP2
		.Screen/y DEI2 #0008 ++ .Screen/y DEO2
		INC GTHk ,&ver JCN
	POP2
	POPr

	AUTO-NONE

RTN

@draw-tile ( x* y* -- )

	;within-viewport JSR2 ,&continue JCN
		POP2 POP2 RTN
		&continue
	.zoom/active LDZ #00 = ,&no-zoom JCN
		OVR2 OVR2 ;get-pixel JSR2 #00 SWP 8** ;bigpixel-icns ++ .Screen/addr DEO2
		.zoom/y LDZ2 -- 8** .canvas/y1 LDZ2 ++ #22 SFT2 .Screen/y DEO2
		.zoom/x LDZ2 -- 8** .canvas/x1 LDZ2 ++ #22 SFT2 .Screen/x DEO2
		#09 .Screen/sprite DEO
		RTN
		&no-zoom
	( TODO: Draw onionskin )
	#33 SFT2 SWP2 #33 SFT2 SWP2
	OVR2 OVR2 ;get-row JSR2 .Screen/addr DEO2
	.canvas/y1 LDZ2 ++ .Screen/y DEO2
	.canvas/x1 LDZ2 ++ .Screen/x DEO2
	#09 .Screen/sprite DEO

RTN

@within-viewport ( x* y* -- x* y* flag )

	.zoom/active LDZ #00 = ,&no-zoom JCN
		OVR2 .zoom/x LDZ2 -- .canvas/w LDZ2 << ,&within-y-zoom JCN [ #00 RTN ] &within-y-zoom
		DUP2 .zoom/y LDZ2 -- .canvas/h LDZ2 << ,&within-x-zoom JCN [ #00 RTN ] &within-x-zoom
		#01 RTN
		&no-zoom
	DUP2 .canvas/h LDZ2 8** << ,&within-y JCN [ #00 RTN ] &within-y
	OVR2 .canvas/w LDZ2 8** << ,&within-x JCN [ #00 RTN ] &within-x
		#01 RTN

RTN

@draw-cursor ( -- )

	( clear brush size )
	.cursor/x2 LDZ2
	.cursor/y2 LDZ2
	( clear size cursor )
	OVR2 OVR2
	#0003 -- .Screen/y DEO2
	#0003 -- .Screen/x DEO2
	#40 .Screen/sprite DEO
	( clear last cursor )
	#40 ;draw-pointer JSR2

	( record cursor positions )
	.Mouse/x DEI2 .cursor/x2 STZ2
	.Mouse/y DEI2 .cursor/y2 STZ2

	( draw size cursor )
	.brush/tool LDZ DUP #01 = SWP #03 = #0000 == ;&outside-canvas JCN2
	( outside canvas )
	.Mouse/x DEI2 .Mouse/y DEI2 .canvas ;within-rect JSR2 #00 = ;&outside-canvas JCN2
		.cursor/x2 LDZ2 #0003 -- .Screen/x DEO2
		.cursor/y2 LDZ2 #0003 -- .Screen/y DEO2
		;brush-icns #00 .brush/size LDZ 8** ++ .Screen/addr DEO2
		.Mouse/state DEI #00 ! DUP 2* #41 ADD .Screen/sprite DEO
		#00 = ,&outside-canvas JCN RTN
	&outside-canvas

	( draw new cursor )
	.cursor/x2 LDZ2
	.cursor/y2 LDZ2
	#4143 .Mouse/state DEI SWP? POP
		,draw-pointer JSR

RTN

@draw-pointer ( x* y* color -- )

	STH
	.Screen/y DEO2
	.Screen/x DEO2
	;pointers-icns .Screen/addr DEO2
	STHr .Screen/sprite DEO

RTN

@draw-panel ( -- )

	( frame )
	.panel/x LDZ2 .panel/y LDZ2 #01 #0e ;draw-frame JSR2
	( tools )
	;draw-toolpane JSR2
	.panel/x LDZ2 INC2 .panel/x2 LDZ2 .panel/y LDZ2 #0024 ++ #01 ;line-hor JSR2
	;draw-pattpane JSR2
	.panel/x LDZ2 INC2 .panel/x2 LDZ2 .panel/y LDZ2 #0052 ++ #01 ;line-hor JSR2
	;draw-sizepane JSR2

RTN

@draw-toolpane ( -- )

	AUTO-ADDR
	( stash selection ) .brush/tool LDZ STH
	;tool-icns .Screen/addr DEO2
	#0600
	&tools-loop
		#00 OVR 2MOD #09 * .panel/x LDZ2 ++ #0004 ++ .Screen/x DEO2
		#00 OVR 2/ #0a * .panel/y LDZ2 ++ #0004 ++ .Screen/y DEO2
		DUP STHkr = #0a * #05 + .Screen/sprite DEO
		INC GTHk ,&tools-loop JCN
	POP2
	POPr

RTN

@draw-pattpane ( -- )

	AUTO-ADDR
	( stash selection ) .brush/patt LDZ STH
	;patt-icns .Screen/addr DEO2
	#0800
	&patt-loop
		#00 OVR 2MOD #09 * .panel/x LDZ2 ++ #0004 ++ .Screen/x DEO2
		#00 OVR 2/ #0a * .panel/y LDZ2 ++ #0029 ++ .Screen/y DEO2
		DUP STHkr = #0a * #05 + .Screen/sprite DEO
		INC GTHk ,&patt-loop JCN
	POP2
	POPr

RTN

@draw-sizepane ( -- )

	AUTO-ADDR
	( stash selection ) .brush/size LDZ STH
	;size-icns .Screen/addr DEO2
	#0800
	&size-loop
		#00 OVR 2MOD #09 * .panel/x LDZ2 ++ #0004 ++ .Screen/x DEO2
		#00 OVR 2/ #0a * .panel/y LDZ2 ++ #0056 ++ .Screen/y DEO2
		DUP STHkr = #0a * #05 + .Screen/sprite DEO
		INC GTHk ,&size-loop JCN
	POP2
	POPr

RTN

@draw-animpane ( -- )

	.animpane/y1 LDZ2 .Screen/y DEO2

	.animpane/x1 LDZ2 STH2k .Screen/x DEO2
	;eyes-icns .anim/onion LDZ TOS 8** ++ .Screen/addr DEO2
	#01 .Screen/sprite DEO

	AUTO-X
	STH2r #0010 ++ .Screen/x DEO2
	.anim/frame LDZ #02 ;draw-hex JSR2
	.anim/limit LDZ #08 ;draw-hex JSR2
	AUTO-NONE

RTN

@draw-filepane ( -- )

	( file i/o )
	.filepane/x1 LDZ2 .Screen/x DEO2
	.filepane/y1 LDZ2 .Screen/y DEO2
	;make-icn .Screen/addr DEO2
	#01 .Screen/sprite DEO
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	;load-icn .Screen/addr DEO2
	#01 .Screen/sprite DEO
	.Screen/x DEI2 #0010 ++ .Screen/x DEO2

	&state ( -- )
		.filepane/x1 LDZ2 #0018 ++ .Screen/x DEO2
		.filepane/y1 LDZ2 .Screen/y DEO2
		;save-icn .Screen/addr DEO2
		#0a05 .state/changed LDZ SWP? POP .Screen/sprite DEO

RTN

@draw-namepane ( -- )

	( bottom )
	.namepane/x1 LDZ2 .Screen/x DEO2
	.namepane/y1 LDZ2 .Screen/y DEO2
	#01 ;draw-filepath JSR2
	&clear
		#00 .Screen/sprite DEO
		.Screen/x DEI2 #0008 ++ DUP2 .Screen/x DEO2
		.namepane/x2 LDZ2 << ,&clear JCN

RTN

@draw-background ( -- )

	;draw-filepane/state JSR2
	;draw-animpane JSR2
	;draw-filepane JSR2

	.state/presentation LDZ #00 = #01 JCN [ RTN ]

	( draw hor line )
	#0000
	.Screen/width DEI2
	.center/y LDZ2
	.state/presentation LDZ #00 =
		;line-hor JSR2

	( draw ver line )
	.center/x LDZ2
	#0000
	.Screen/height DEI2
	.state/presentation LDZ #00 =
		;line-ver JSR2

	;draw-namepane JSR2

RTN

@draw-filepath ( color -- )

	STH
	#0038 .Screen/x DEO2
	.Screen/height DEI2 #0010 -- .Screen/y DEO2
	;filepath STHr ,draw-str JSR

RTN

( strings )

@draw-str ( text* color -- )

	STH
	AUTO-X
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	AUTO-NONE
	POPr

RTN

@draw-short ( short* color -- )

	STH  SWP STHkr ,draw-byte JSR STHr

@draw-byte ( byte color -- )

	STH DUP #04 SFT STHkr ,draw-hex JSR STHr

@draw-hex ( char color -- )

	SWP #0f AND [ DUP #09 > #27 * + #30 + ] SWP

@draw-char ( char color -- )

	SWP #20 - TOS 8** ;font ++ .Screen/addr DEO2
	.Screen/sprite DEO

RTN

( ux )

@within-rect ( x* y* rect -- flag )

	STH
	( y < rect.y1 ) DUP2 STHkr #02 ADD LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 ADD LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 ADD LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@line-hor ( x0* x1* y* color -- )

	STH .Screen/y DEO2 SWP2
	&loop
		( save ) DUP2 .Screen/x DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@line-ver ( x* y0* y1* color -- )

	STH ROT2 .Screen/x DEO2 SWP2
	&loop
		( save ) DUP2 .Screen/y DEO2
		( draw ) STHkr .Screen/pixel DEO
		INC2 INC2 GTH2k ,&loop JCN
	POP2 POP2 POPr

RTN

@line-diag ( rect color -- )

	( load ) .line-guide/color STZ
	( x0 ) LDZ2k  #0001 SUB2 .line-guide/x2 STZ2
	( y0 ) INC INC LDZ2k #0001 SUB2  .line-guide/y2 STZ2
	( x1 ) INC INC LDZ2k .line-guide/x1 STZ2
	( y1 ) INC INC LDZ2 .line-guide/y1 STZ2

	.line-guide/x1 LDZ2 .line-guide/x2 LDZ2 -- ABS2 .line-guide/dx STZ2
	.line-guide/y1 LDZ2 .line-guide/y2 LDZ2 -- ABS2 #0000 SWP2 -- .line-guide/dy STZ2
	#ffff #00 .line-guide/x2 LDZ2 .line-guide/x1 LDZ2 LTS2 2** ++ .line-guide/sx STZ2
	#ffff #00 .line-guide/y2 LDZ2 .line-guide/y1 LDZ2 LTS2 2** ++ .line-guide/sy STZ2
	.line-guide/dx LDZ2 .line-guide/dy LDZ2 ++ .line-guide/e1 STZ2
	&loop
		( paint ) .line-guide/x2 LDZ2 .Screen/x DEO2 .line-guide/y2 LDZ2 .Screen/y DEO2 .line-guide/color LDZ .Screen/pixel DEO
		.line-guide/x2 LDZ2 .line-guide/x1 LDZ2 == .line-guide/y2 LDZ2 .line-guide/y1 LDZ2 == #0101 == ,&end JCN
		.line-guide/e1 LDZ2 2** .line-guide/e2 STZ2
		.line-guide/e2 LDZ2 .line-guide/dy LDZ2 LTS2 ,&skipy JCN
			.line-guide/e1 LDZ2 .line-guide/dy LDZ2 ++ .line-guide/e1 STZ2
			.line-guide/x2 LDZ2 .line-guide/sx LDZ2 ++ .line-guide/x2 STZ2
			&skipy
		.line-guide/e2 LDZ2 .line-guide/dx LDZ2 GTS2 ,&skipx JCN
			.line-guide/e1 LDZ2 .line-guide/dx LDZ2 ++ .line-guide/e1 STZ2
			.line-guide/y2 LDZ2 .line-guide/sy LDZ2 ++ .line-guide/y2 STZ2
			&skipx
		;&loop JMP2
	&end

RTN

@line-rect ( rect color -- )

	STH STH

	( not empty )
	STHkr LDZ2 STHkr #04 + LDZ2 !! ,&has-width JCN
		POP2r RTN
		&has-width
	STHkr #02 + LDZ2 STHkr #06 + LDZ2 !! ,&has-height JCN
		POP2r RTN
		&has-height

	( y2 ) STHkr #06 + LDZ2
	( y1 ) STHkr #02 + LDZ2 DEC2 ( flip sign ) GTH2k JMP SWP2
	&ver
		( save ) DUP2 .Screen/y DEO2
		( x1 ) STHkr LDZ2 DEC2 .Screen/x DEO2
		OVRr STHr .Screen/pixel DEO
		( x2 ) STHkr #04 + LDZ2 .Screen/x DEO2
		OVRr STHr .Screen/pixel DEO
		( incr )
		INC2 GTH2k ,&ver JCN
	POP2
	( x2 ) STHkr #04 + LDZ2
	( x1 ) STHkr LDZ2 DEC2 ( flip sign ) GTH2k JMP SWP2
	&hor
		( save ) DUP2 .Screen/x DEO2
		( y1 ) STHkr #02 + LDZ2 DEC2 .Screen/y DEO2
		OVRr STHr .Screen/pixel DEO
		( y2 ) STHkr #06 + LDZ2 .Screen/y DEO2
		OVRr STHr .Screen/pixel DEO
		( incr )
		INC2 GTH2k ,&hor JCN
	POP2
	POPr
	.Screen/x DEO2
	.Screen/y DEO2
	STHr .Screen/pixel DEO

RTN

@fill-rect ( rect color -- )

	STH STH
	( y2 ) STHkr #06 + LDZ2 INC2 INC2
	( y1 ) STHkr #02 + LDZ2 DEC2
	&ver
		( save ) DUP2 .Screen/y DEO2
		( x2 ) STHkr #04 + LDZ2 INC2 INC2
		( x1 ) STHkr LDZ2 DEC2
		&hor
			( save ) DUP2 .Screen/x DEO2
			( draw ) OVRr STHr .Screen/pixel DEO
			INC2 GTH2k ,&hor JCN
		POP2 POP2
		INC2 GTH2k ,&ver JCN
	POP2 POP2
	POPr POPr

RTN

@snarf-txt ".snarf $1

( Tools )

@tools
	:pencil/hover  :pencil/up  :pencil/down  :pencil/drag
	:marker/hover  :marker/up  :marker/down  :marker/drag
	:stroke/hover  :stroke/up  :stroke/down  :stroke/drag
	:magic/hover   :magic/up   :magic/down   :magic/drag
	:box/hover     :box/up     :box/down     :box/drag
	:magnify/hover :magnify/up :magnify/down :magnify/drag

@pencil ( x* y* -> )

	&down
		OVR2 OVR2 .cursor/y1 STZ2 .cursor/x1 STZ2
		OVR2 OVR2 .brush/oper LDZ2 JSR2
	&up
		;draw-tile JSR2
		SET-STATE
		BRK
	&drag
		OVR2 OVR2 STH2 STH2
		.cursor/x1 LDZ2 .cursor/y1 LDZ2 STH2r STH2r
		;paint-line JSR2
		.cursor/y1 STZ2 .cursor/x1 STZ2
		BRK
	&hover

BRK

@marker ( x* y* -> )

	&up
		POP2 POP2
		SET-STATE BRK
	&down
	&drag
		#0003 -- SWP2 #0003 -- SWP2
		;paint-brush JSR2
		BRK
	&hover

BRK

@stroke ( x* y* -> )

	&down
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-diag JSR2
		.cursor/y1 STZ2 .cursor/x1 STZ2
		BRK
	&up
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-diag JSR2
		.cursor/y2 STZ2 .cursor/x2 STZ2
		.cursor/x1 LDZ2 .cursor/y1 LDZ2 .cursor/x2 LDZ2 .cursor/y2 LDZ2 ;paint-line JSR2
		SET-STATE
		BRK
	&drag
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-diag JSR2
		.cursor/y2 STZ2 .cursor/x2 STZ2
		( update guide )
		.cursor/x1 LDZ2 .cursor/y1 LDZ2 ;to-canvas JSR2 INC2 .guide/y1 STZ2 INC2 .guide/x1 STZ2
		.cursor/x2 LDZ2 .cursor/y2 LDZ2 ;to-canvas JSR2 .guide/y2 STZ2 .guide/x2 STZ2
		( erase guide ) .guide #43 ;line-diag JSR2
		BRK
	&hover

BRK

@magic ( x* y* -> )

	&up
		SET-STATE
	&down
	&drag
		#0003 -- SWP2 #0003 -- SWP2
		;paint-magic JSR2
		BRK
	&hover

BRK

@box ( x* y* -> )

	&down
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-rect JSR2
		.cursor/y1 STZ2 .cursor/x1 STZ2
		BRK
	&up
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-rect JSR2
		.cursor/y2 STZ2 .cursor/x2 STZ2
		;paint-rect JSR2
		SET-STATE
		BRK
	&drag
		( clear cursor ) .cursor/x2 LDZ2 .cursor/y2 LDZ2 #40 ;draw-pointer JSR2
		( erase guide ) .guide #40 ;line-rect JSR2
		.cursor/y2 STZ2 .cursor/x2 STZ2
		( update guide )
		.cursor/x1 LDZ2 .cursor/y1 LDZ2 ,to-canvas JSR INC2 .guide/y1 STZ2 INC2 .guide/x1 STZ2
		.cursor/x2 LDZ2 .cursor/y2 LDZ2 ,to-canvas JSR .guide/y2 STZ2 .guide/x2 STZ2
		( draw guide ) .guide #43 ;line-rect JSR2
		BRK
	&hover

BRK

@to-canvas ( x* y* -- x* y* )

	.zoom/active LDZ ,&on-zoom JCN
		.canvas/y1 LDZ2 ++ SWP2
		.canvas/x1 LDZ2 ++ SWP2
	RTN

	&on-zoom
		.zoom/y LDZ2 -- 8** .canvas/y1 LDZ2 ++ SWP2
		.zoom/x LDZ2 -- 8** .canvas/x1 LDZ2 ++ SWP2

RTN

@magnify ( x* y* -> )

	&down
		.zoom/active TOGGLE
		.canvas/h LDZ2 2// -- .zoom/y STZ2
		.canvas/w LDZ2 2// -- .zoom/x STZ2
		;redraw JSR2
		BRK
	&up
	&drag
		POP2 POP2
		BRK
	&hover

BRK

@untitled-txt  "untitled.icn $1

~src/stdlib.tal
~src/gly.tal
~src/assets.tal

@data
