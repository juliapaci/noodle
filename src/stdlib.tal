( frame )

@draw-frame ( x* y* w h sprite* -- )

	.Screen/addr DEO2
	,&h STR ,&w STR
	DUP2 .Screen/y DEO2 ,&y STR2
	DUP2 .Screen/x DEO2 ,&x STR2
	AUTO-X
	#85 .Screen/sprite DEO
	,&next JSR [ LIT &w $1 ] ,&repeat JSR
	AUTO-Y
	,&next JSR #85 .Screen/sprite DEO
	,&next JSR [ LIT &h $1 ] ,&repeat JSR
	( left )
	[ LIT2 &y $2 ] #0008 ++ .Screen/y DEO2
	[ LIT2 &x $2 ] .Screen/x DEO2
	,&next JSR ,&h LDR ,&repeat JSR
	AUTO-X
	,&next JSR #85 .Screen/sprite DEO
	,&next JSR ,&w LDR ,&repeat JSR
	,&next JSR #85 .Screen/sprite DEO
	( fill )
	,&next JSR
	,&x LDR2 #0008 ++ .Screen/x DEO2
	,&y LDR2 #0008 ++ .Screen/y DEO2
	,&w LDR ,&h LDR #81 ,fill-rect JSR

JMP2r
	&next
		.Screen/addr DEI2k #0010 ++ ROT DEO2
	JMP2r
	&repeat
		#00 
		&repeat-loop 
			#81 .Screen/sprite DEO 
			INC GTHk ,&repeat-loop JCN 
		POP2
	JMP2r

@fill-rect ( w h color -- )

	STH
	AUTO-X
	.Screen/x DEI2 ,&anchor-x STR2
	SWP ,&w STR #00
	&ver
		[ LIT &w $1 ] #00
		&hor
			STHkr .Screen/sprite DEO
			INC GTHk ,&hor JCN
		POP2
		.Screen/y DEI2k #0008 ++ ROT DEO2
		[ LIT2 &anchor-x $2 ] .Screen/x DEO2
		INC GTHk ,&ver JCN
	POP2
	POPr

JMP2r

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/read DEO2

	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore

JMP2r

( hex parsing )

@sbyte ( str* -- byte )

	LDAk ,chex JSR STH
	INC2 LDA ,chex JSR 
	STHr #40 SFT ADD

JMP2r

@chex ( char -- hex )

	DUP #2f > OVR #3a < AND ,&number JCN
	DUP #60 > OVR #67 < AND ,&lc JCN
	DUP #40 > OVR #47 < AND ,&uc JCN
		POP #00 JMP2r
	&number #30 - JMP2r
	&uc #37 - JMP2r
	&lc #57 - JMP2r

JMP2r

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

JMP2r

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ++ SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

JMP2r

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

JMP2r

@scap ( str* -- str-end* )

	LDAk #00 ! JMP JMP2r
	&while INC2 LDAk ,&while JCN

JMP2r

@scpy ( src* dst* -- )
	
	STH2
	&while
		LDAk STH2kr STA INC2r
		INC2 LDAk ,&while JCN
	POP2
	#00 STH2r STA

JMP2r

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

JMP2r

@spop ( str* -- )

	LDAk ,&no-null JCN
		POP2 JMP2r &no-null
	#00 ROT ROT ,scap JSR #0001 -- STA

JMP2r

@scmp ( a* b* -- flag )

	STH2
	&loop
		LDAk LDAkr STHr = ,&not-diff JCN
			POP2 POP2r #00 JMP2r
			&not-diff
		LDAk LDAkr STHr #0000 !! ,&not-end JCN
			POP2 POP2r #01 JMP2r
			&not-end
		INC2 INC2r
		,&loop JMP
	POP2 POP2r #00

JMP2r

( print )

@print ( short* -- )

	&short ( short* -- ) SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD EMIT

JMP2r

@print-str ( str* -- )

	#0001 SUB2
	&while
		INC2 LDAk DUP EMIT ,&while JCN
	POP2

JMP2r
