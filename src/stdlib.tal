( frame )

@draw-frame ( w h -- )

	,&h STR ,&w STR
	DUP2 .Screen/y DEO2 ,&y STR2
	DUP2 .Screen/x DEO2 ,&x STR2
	AUTO-X
	;frame-chrs/tl .Screen/addr DEO2 #85 .Screen/sprite DEO
	;frame-chrs/tc .Screen/addr DEO2 [ LIT &w $1 ] ,&repeat JSR
	AUTO-Y
	;frame-chrs/tr .Screen/addr DEO2 #85 .Screen/sprite DEO
	;frame-chrs/mr .Screen/addr DEO2 [ LIT &h $1 ] ,&repeat JSR
	( left )
	[ LIT2 &y $2 ] #0008 ++ .Screen/y DEO2
	[ LIT2 &x $2 ] .Screen/x DEO2
	;frame-chrs/ml .Screen/addr DEO2 ,&h LDR ,&repeat JSR
	AUTO-X
	;frame-chrs/bl .Screen/addr DEO2 #85 .Screen/sprite DEO
	;frame-chrs/bc .Screen/addr DEO2 ,&w LDR ,&repeat JSR
	;frame-chrs/br .Screen/addr DEO2 #85 .Screen/sprite DEO
	( fill )
	;frame-chrs/mc .Screen/addr DEO2
	,&x LDR2 #0008 ++ .Screen/x DEO2
	,&y LDR2 #0008 ++ .Screen/y DEO2
	#01 ,&h LDR ,fill-frame JSR

RTN
	&repeat
		#00 
		&repeat-loop 
			#81 .Screen/sprite DEO 
			INC GTHk ,&repeat-loop JCN 
		POP2
	RTN

@fill-frame ( w h -- )

	AUTO-X
	.Screen/x DEI2 ,&anchor-x STR2
	SWP ,&w STR #00
	&ver
		[ LIT &w $1 ] #00
		&hor
			#81 .Screen/sprite DEO
			INC GTHk ,&hor JCN
		POP2
		.Screen/y DEI2k #0008 ++ ROT DEO2
		[ LIT2 &anchor-x $2 ] .Screen/x DEO2
		INC GTHk ,&ver JCN
	POP2

RTN

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/read DEO2

	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore

RTN

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ++ SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

RTN

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

RTN

@scap ( str* -- str-end* )

	LDAk #00 ! JMP RTN
	&while INC2 LDAk ,&while JCN

RTN

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

RTN

@spop ( str* -- )

	LDAk ,&no-null JCN
		POP2 RTN &no-null
	#00 ROT ROT ,scap JSR #0001 -- STA

RTN

@print ( short* -- )

	&short ( short* -- ) SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD EMIT

RTN